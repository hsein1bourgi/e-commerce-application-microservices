name: CI - Detect & Build & Scan & Push

on:
  push:
    branches:
      - main
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count:  ${{ steps.set-matrix.outputs.count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute changed services
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.sha }}"
            RANGE="$BASE...$HEAD"
          else
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              RANGE="${{ github.event.before }}...${{ github.sha }}"
            else
              git fetch origin main
              RANGE="origin/main...HEAD"
            fi
          fi

          echo "🔎 Using diff range: $RANGE"
          CHANGED=$(git diff --name-only --diff-filter=ACMR $RANGE || true)

          echo "📂 Changed files:"
          echo "$CHANGED"

          list=()
          echo "$CHANGED" | grep -q '^customer/'  && list+=('{"service":"customer"}')
          echo "$CHANGED" | grep -q '^products/'  && list+=('{"service":"products"}')
          echo "$CHANGED" | grep -q '^shopping/'  && list+=('{"service":"shopping"}')

          if [ ${#list[@]} -eq 0 ]; then
            echo "matrix={\"include\":[]}" >> "$GITHUB_OUTPUT"
            echo "count=0" >> "$GITHUB_OUTPUT"
            echo "⚠️ No services detected."
          else
            JSON="{\"include\":[${list[*]}]}"
            echo "matrix=$JSON" >> "$GITHUB_OUTPUT"
            echo "count=${#list[@]}" >> "$GITHUB_OUTPUT"
            echo "✅ Matrix filled with ${#list[@]} service(s): $JSON"
          fi

      - name: Debug outputs
        run: |
          echo "Matrix: ${{ steps.set-matrix.outputs.matrix }}"
          echo "Count:  ${{ steps.set-matrix.outputs.count }}"

  build-local:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Build image (no push)
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: false
          load: true
          tags: local/${{ matrix.service }}:ci-test
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Show image tag
        run: echo "Built image  local/${{ matrix.service }}:ci-test"

      - name: Save image as tar
        run: docker save -o ${{ matrix.service }}.tar local/${{ matrix.service }}:ci-test

      - name: Upload image artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: ${{ matrix.service }}.tar

  scan:
    needs: [detect-changes, build-local]
    if: ${{ github.event_name == 'pull_request' && needs.detect-changes.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - name: Download image artifact
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image

      - name: Load Docker image
        run: docker load -i ${{ matrix.service }}.tar

      - name: Trivy scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: local/${{ matrix.service }}:ci-test
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
  
  push-to-ecr:
    needs: [detect-changes, build-local]
    # if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.detect-changes.outputs.count != '0' }}
    if: ${{ needs.detect-changes.outputs.count != '0' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.full_name == github.repository)) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecom-app-github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}

      
      - name: Login to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
      
      - name: Compute repo & tags
        id: vars
        shell: bash
        run: |
          SHA7=${GITHUB_SHA::7}
          # Your TF repos: ecom-app-customer / -products / -shopping
          REPO="${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecom-app-${{ matrix.service }}"
          TAGS="$REPO:sha-$SHA7"$'\n'"$REPO:main"
          echo "repo=$REPO" >> "$GITHUB_OUTPUT"
          printf "tags<<EOF\n%s\nEOF\n" "$TAGS" >> "$GITHUB_OUTPUT"
      
      - name: Build and push to ECR
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ steps.vars.outputs.tags }}
          cache-from: type=gha,scope=${{ matrix.service }}
          cache-to: type=gha,mode=max,scope=${{ matrix.service }}
      
      - name: Done
        run: |
          echo "Pushed ${{ matrix.service }} to ECR:"
          echo "${{ steps.vars.outputs.tags }}"
      
