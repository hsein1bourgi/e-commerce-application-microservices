name: CI - Detect, Build, Scan

on:
  push:
    branches: [ "main" ]
  pull_request:

jobs:
  detect-changes:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      count:  ${{ steps.set-matrix.outputs.count }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Compute changed services
        id: set-matrix
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            BASE="${{ github.event.pull_request.base.sha }}"
            HEAD="${{ github.sha }}"
            RANGE="$BASE...$HEAD"
          else
            if [ "${{ github.ref }}" = "refs/heads/main" ]; then
              RANGE="${{ github.event.before }}...${{ github.sha }}"
            else
              git fetch origin main
              RANGE="origin/main...HEAD"
            fi
          fi

          echo "Using diff range: $RANGE"
          CHANGED=$(git diff --name-only --diff-filter=ACMR $RANGE || true)
          echo "$CHANGED"

          list=()
          echo "$CHANGED" | grep -q '^customer/'  && list+=('"customer"')
          echo "$CHANGED" | grep -q '^products/'  && list+=('"products"')
          echo "$CHANGED" | grep -q '^shopping/'  && list+=('"shopping"')

          if [ ${#list[@]} -eq 0 ]; then
            echo 'matrix={"service":[]}' >> "$GITHUB_OUTPUT"
            echo 'count=0' >> "$GITHUB_OUTPUT"
          else
            echo "matrix={\"service\":[${list[*]}]}" >> "$GITHUB_OUTPUT"
            echo "count=${#list[@]}" >> "$GITHUB_OUTPUT"
          fi

  build:
    needs: detect-changes
    if: ${{ needs.detect-changes.outputs.count != '0' }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      # --- PR build (no push, save as artifact) ---
      - name: Build image (PR build)
        if: ${{ github.event_name == 'pull_request' }}
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: false
          load: true
          tags: local/${{ matrix.service }}:ci-test

      - name: Save image as tar
        if: ${{ github.event_name == 'pull_request' }}
        run: docker save -o ${{ matrix.service }}.tar local/${{ matrix.service }}:ci-test

      - name: Upload image artifact
        if: ${{ github.event_name == 'pull_request' }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.service }}-image
          path: ${{ matrix.service }}.tar

      # --- Main build (push to ECR) ---
      - name: Configure AWS credentials
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecom-app-github-actions-role
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        if: github.ref == 'refs/heads/main'
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build & Push image (Main build)
        if: github.ref == 'refs/heads/main'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.service }}
          file: ./${{ matrix.service }}/Dockerfile
          push: true
          tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecom-app/${{ matrix.service }}:${{ github.sha }}
          provenance: true
          sbom: true

  scan-pr:
    needs: build
    if: github.event_name == 'pull_request' && needs.detect-changes.outputs.count != '0'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.service }}-image

      - run: docker load -i ${{ matrix.service }}.tar

      - uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: local/${{ matrix.service }}:ci-test
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true

  scan-main:
    needs: build
    if: github.ref == 'refs/heads/main' && needs.detect-changes.outputs.count != '0'
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.detect-changes.outputs.matrix) }}
    steps:
      - uses: aquasecurity/trivy-action@0.28.0
        with:
          image-ref: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/ecom-app/${{ matrix.service }}:${{ github.sha }}
          format: 'table'
          severity: 'CRITICAL,HIGH'
          ignore-unfixed: true
